/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.4.1 public/Arrow.glb 
*/

import React, { useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import { easing } from 'maath'

export function Arrow(props,onClick,onPointerEnter) {
  const { nodes, materials } = useGLTF('/Arrow.glb')
  const [hoveredArrow, setHoveredArrow] = useState(false);
  const meshRef = useRef();
  useFrame((state, delta) => {
    const t = 0.9 + 0.1 * Math.sin(state.clock.getElapsedTime() * 5);
    meshRef.current && easing.damp3(meshRef.current.scale, hoveredArrow ? t : 0.8, 0.3, delta);
  })
  return (
    <group {...props} dispose={null}>
      <mesh
        ref={meshRef}
        geometry={nodes.arrow.geometry} material={materials.Pink} rotation={[Math.PI / 2, 0, 0]}
        onPointerDown={() => onClick}
        onPointerOver={() => setHoveredArrow(true)}
        onPointerOut={() => setHoveredArrow(false)}
      />
    </group>
  )
}

useGLTF.preload('/Arrow.glb')
