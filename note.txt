import React, { useRef, useState } from 'react';
import { Canvas } from '@react-three/fiber';
import { OrbitControls } from '@react-three/drei';

function RotatableBox() {
  const meshRef = useRef();
  const [isDragging, setIsDragging] = useState(false);
  const [lastMousePosition, setLastMousePosition] = useState([0, 0]);

  const onPointerDown = (event) => {
    setIsDragging(true);
    setLastMousePosition([event.clientX, event.clientY]);
  };

  const onPointerMove = (event) => {
    if (isDragging) {
      const [lastX, lastY] = lastMousePosition;
      const deltaX = event.clientX - lastX;
      const deltaY = event.clientY - lastY;

      meshRef.current.rotation.y += deltaX * 0.01;
      meshRef.current.rotation.x += deltaY * 0.01;

      setLastMousePosition([event.clientX, event.clientY]);
    }
  };

  const onPointerUp = () => {
    setIsDragging(false);
  };

  return (
    <mesh
      ref={meshRef}
      onPointerDown={onPointerDown}
      onPointerMove={onPointerMove}
      onPointerUp={onPointerUp}
      onPointerOut={onPointerUp} // to handle the case when the mouse leaves the mesh area
    >
      <boxGeometry args={[1, 1, 1]} />
      <meshStandardMaterial color="orange" />
    </mesh>
  );
}

export default function App() {
  return (
    <Canvas>
      <ambientLight intensity={0.5} />
      <directionalLight position={[5, 5, 5]} />
      <RotatableBox />
      <OrbitControls enableZoom={false} />
    </Canvas>
  );
}
